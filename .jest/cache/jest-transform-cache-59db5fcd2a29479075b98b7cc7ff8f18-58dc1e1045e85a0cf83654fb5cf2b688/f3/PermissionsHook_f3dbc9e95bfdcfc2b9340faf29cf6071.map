{"version":3,"sources":["../src/PermissionsHook.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA;;;;AA6BA,SAAS,aAAT,CACE,OADF,EAEE,OAFF,EAE0C;AAExC,MAAM,SAAS,GAAG,mBAAO,IAAP,CAAlB;;AACA,kBAA4B,qBAA4B,IAA5B,CAA5B;AAAA;AAAA,MAAO,MAAP;AAAA,MAAe,SAAf;;AACA,aAA8D,OAAO,IAAI,EAAzE;AAAA,sBAAQ,GAAR;AAAA,MAAQ,GAAR,yBAAc,IAAd;AAAA,0BAAoB,OAApB;AAAA,MAAoB,OAApB,6BAA8B,KAA9B;AAAA,MAAwC,iBAAxC;;AAEA,MAAM,aAAa,GAAG,wBAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CACT,OAAO,CAAC,SAAR,CACrB,MAAM,CAAC,IAAP,CAAY,iBAAZ,EAA+B,MAA/B,GAAwC,CAAxC,GAA6C,iBAA7C,GAA6E,SADxD,CADS;;AAAA;AAC1B,YAAA,QAD0B;AAIhC,gBAAI,SAAS,CAAC,OAAd,EAAuB,SAAS,CAAC,QAAD,CAAT;AAJS,6CAKzB,QALyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAZ,EAMnB,CAAC,OAAO,CAAC,SAAT,CANmB,CAAtB;AAQA,MAAM,iBAAiB,GAAG,wBAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CACb,OAAO,CAAC,aAAR,CACrB,MAAM,CAAC,IAAP,CAAY,iBAAZ,EAA+B,MAA/B,GAAwC,CAAxC,GAA6C,iBAA7C,GAA6E,SADxD,CADa;;AAAA;AAC9B,YAAA,QAD8B;AAIpC,gBAAI,SAAS,CAAC,OAAd,EAAuB,SAAS,CAAC,QAAD,CAAT;AAJa,8CAK7B,QAL6B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAZ,EAMvB,CAAC,OAAO,CAAC,aAAT,CANuB,CAA1B;AAQA,wBACE,SAAS,UAAT,GAAmB;AACjB,QAAI,OAAJ,EAAa,iBAAiB;AAC9B,QAAI,CAAC,OAAD,IAAY,GAAhB,EAAqB,aAAa;AACnC,GAJH,EAKE,CAAC,GAAD,EAAM,OAAN,EAAe,iBAAf,EAAkC,aAAlC,CALF;AASA,wBAAU,SAAS,QAAT,GAAiB;AACzB,IAAA,SAAS,CAAC,OAAV,GAAoB,IAApB;AACA,WAAO,YAAK;AACV,MAAA,SAAS,CAAC,OAAV,GAAoB,KAApB;AACD,KAFD;AAGD,GALD,EAKG,EALH;AAOA,SAAO,CAAC,MAAD,EAAS,iBAAT,EAA4B,aAA5B,CAAP;AACD;;AAMK,SAAU,oBAAV,CACJ,OADI,EAC+C;AAEnD,SAAO,UAAC,OAAD;AAAA,WACL,aAAa,CAAsB,OAAtB,EAA+B,OAA/B,CADR;AAAA,GAAP;AAED","sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\n\nimport { PermissionResponse } from './PermissionsInterface';\n\n// These types are identical, but improves the readability for suggestions in editors\ntype RequestPermissionMethod<Permission extends PermissionResponse> = () => Promise<Permission>;\ntype GetPermissionMethod<Permission extends PermissionResponse> = () => Promise<Permission>;\n\ninterface PermissionHookMethods<Permission extends PermissionResponse, Options = never> {\n  /** The permission method that requests the user to grant permission. */\n  requestMethod: (options?: Options) => Promise<Permission>;\n  /** The permission method that only fetches the current permission status. */\n  getMethod: (options?: Options) => Promise<Permission>;\n}\n\ninterface PermissionHookBehavior {\n  /** If the hook should automatically fetch the current permission status, without asking the user. */\n  get?: boolean;\n  /** If the hook should automatically request the user to grant permission. */\n  request?: boolean;\n}\n\nexport type PermissionHookOptions<Options extends object> = PermissionHookBehavior & Options;\n\n/**\n * Get or request permission for protected functionality within the app.\n * It uses separate permission requesters to interact with a single permission.\n * By default, the hook will only retrieve the permission status.\n */\nfunction usePermission<Permission extends PermissionResponse, Options extends object>(\n  methods: PermissionHookMethods<Permission, Options>,\n  options?: PermissionHookOptions<Options>\n): [Permission | null, RequestPermissionMethod<Permission>, GetPermissionMethod<Permission>] {\n  const isMounted = useRef(true);\n  const [status, setStatus] = useState<Permission | null>(null);\n  const { get = true, request = false, ...permissionOptions } = options || {};\n\n  const getPermission = useCallback(async () => {\n    const response = await methods.getMethod(\n      Object.keys(permissionOptions).length > 0 ? (permissionOptions as Options) : undefined\n    );\n    if (isMounted.current) setStatus(response);\n    return response;\n  }, [methods.getMethod]);\n\n  const requestPermission = useCallback(async () => {\n    const response = await methods.requestMethod(\n      Object.keys(permissionOptions).length > 0 ? (permissionOptions as Options) : undefined\n    );\n    if (isMounted.current) setStatus(response);\n    return response;\n  }, [methods.requestMethod]);\n\n  useEffect(\n    function runMethods() {\n      if (request) requestPermission();\n      if (!request && get) getPermission();\n    },\n    [get, request, requestPermission, getPermission]\n  );\n\n  // Workaround for unmounting components receiving state updates\n  useEffect(function didMount() {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  return [status, requestPermission, getPermission];\n}\n\n/**\n * Create a new permission hook with the permission methods built-in.\n * This can be used to quickly create specific permission hooks in every module.\n */\nexport function createPermissionHook<Permission extends PermissionResponse, Options extends object>(\n  methods: PermissionHookMethods<Permission, Options>\n) {\n  return (options?: PermissionHookOptions<Options>) =>\n    usePermission<Permission, Options>(methods, options);\n}\n"],"sourceRoot":""}