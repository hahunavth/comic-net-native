04592c773140563b24fabf06ff091340
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _EventEmitter = _interopRequireDefault(require("../vendor/emitter/EventEmitter"));

var _NativeEventEmitter = _interopRequireDefault(require("../EventEmitter/NativeEventEmitter"));

var _NativeAppearance = _interopRequireDefault(require("./NativeAppearance"));

var _invariant = _interopRequireDefault(require("invariant"));

var _DebugEnvironment = require("./DebugEnvironment");

var _Platform = _interopRequireDefault(require("../Utilities/Platform"));

var eventEmitter = new _EventEmitter.default();

if (_NativeAppearance.default) {
  var nativeEventEmitter = new _NativeEventEmitter.default(_Platform.default.OS !== 'ios' ? null : _NativeAppearance.default);
  nativeEventEmitter.addListener('appearanceChanged', function (newAppearance) {
    var colorScheme = newAppearance.colorScheme;
    (0, _invariant.default)(colorScheme === 'dark' || colorScheme === 'light' || colorScheme == null, "Unrecognized color scheme. Did you mean 'dark' or 'light'?");
    eventEmitter.emit('change', {
      colorScheme: colorScheme
    });
  });
}

module.exports = {
  getColorScheme: function getColorScheme() {
    if (__DEV__) {
      if (_DebugEnvironment.isAsyncDebugging) {
        return 'light';
      }
    }

    var nativeColorScheme = _NativeAppearance.default == null ? null : _NativeAppearance.default.getColorScheme() || null;
    (0, _invariant.default)(nativeColorScheme === 'dark' || nativeColorScheme === 'light' || nativeColorScheme == null, "Unrecognized color scheme. Did you mean 'dark' or 'light'?");
    return nativeColorScheme;
  },
  addChangeListener: function addChangeListener(listener) {
    return eventEmitter.addListener('change', listener);
  },
  removeChangeListener: function removeChangeListener(listener) {
    eventEmitter.removeListener('change', listener);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFwcGVhcmFuY2UuanMiXSwibmFtZXMiOlsiZXZlbnRFbWl0dGVyIiwiRXZlbnRFbWl0dGVyIiwiTmF0aXZlQXBwZWFyYW5jZSIsIm5hdGl2ZUV2ZW50RW1pdHRlciIsIk5hdGl2ZUV2ZW50RW1pdHRlciIsIlBsYXRmb3JtIiwiT1MiLCJhZGRMaXN0ZW5lciIsIm5ld0FwcGVhcmFuY2UiLCJjb2xvclNjaGVtZSIsImVtaXQiLCJtb2R1bGUiLCJleHBvcnRzIiwiZ2V0Q29sb3JTY2hlbWUiLCJfX0RFVl9fIiwiaXNBc3luY0RlYnVnZ2luZyIsIm5hdGl2ZUNvbG9yU2NoZW1lIiwiYWRkQ2hhbmdlTGlzdGVuZXIiLCJsaXN0ZW5lciIsInJlbW92ZUNoYW5nZUxpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiXSwibWFwcGluZ3MiOiI7O0FBVUE7O0FBR0E7O0FBQ0E7O0FBSUE7O0FBQ0E7O0FBQ0E7O0FBR0EsSUFBTUEsWUFBWSxHQUFHLElBQUlDLHFCQUFKLEVBQXJCOztBQVFBLElBQUlDLHlCQUFKLEVBQXNCO0FBQ3BCLE1BQU1DLGtCQUFrQixHQUFHLElBQUlDLDJCQUFKLENBR3pCQyxrQkFBU0MsRUFBVCxLQUFnQixLQUFoQixHQUF3QixJQUF4QixHQUErQkoseUJBSE4sQ0FBM0I7QUFLQUMsRUFBQUEsa0JBQWtCLENBQUNJLFdBQW5CLENBQ0UsbUJBREYsRUFFRSxVQUFDQyxhQUFELEVBQTBDO0FBQ3hDLFFBQU9DLFdBQVAsR0FBc0JELGFBQXRCLENBQU9DLFdBQVA7QUFDQSw0QkFDRUEsV0FBVyxLQUFLLE1BQWhCLElBQ0VBLFdBQVcsS0FBSyxPQURsQixJQUVFQSxXQUFXLElBQUksSUFIbkIsRUFJRSw0REFKRjtBQU1BVCxJQUFBQSxZQUFZLENBQUNVLElBQWIsQ0FBa0IsUUFBbEIsRUFBNEI7QUFBQ0QsTUFBQUEsV0FBVyxFQUFYQTtBQUFELEtBQTVCO0FBQ0QsR0FYSDtBQWFEOztBQUVERSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFXZkMsRUFBQUEsY0FYZSw0QkFXb0I7QUFDakMsUUFBSUMsT0FBSixFQUFhO0FBQ1gsVUFBSUMsa0NBQUosRUFBc0I7QUFHcEIsZUFBTyxPQUFQO0FBQ0Q7QUFDRjs7QUFHRCxRQUFNQyxpQkFBMEIsR0FDOUJkLDZCQUFvQixJQUFwQixHQUNJLElBREosR0FFSUEsMEJBQWlCVyxjQUFqQixNQUFxQyxJQUgzQztBQUlBLDRCQUNFRyxpQkFBaUIsS0FBSyxNQUF0QixJQUNFQSxpQkFBaUIsS0FBSyxPQUR4QixJQUVFQSxpQkFBaUIsSUFBSSxJQUh6QixFQUlFLDREQUpGO0FBTUEsV0FBT0EsaUJBQVA7QUFDRCxHQWhDYztBQXFDZkMsRUFBQUEsaUJBckNlLDZCQXFDR0MsUUFyQ0gsRUFxQ29EO0FBQ2pFLFdBQU9sQixZQUFZLENBQUNPLFdBQWIsQ0FBeUIsUUFBekIsRUFBbUNXLFFBQW5DLENBQVA7QUFDRCxHQXZDYztBQTRDZkMsRUFBQUEsb0JBNUNlLGdDQTRDTUQsUUE1Q04sRUE0QzBDO0FBRXZEbEIsSUFBQUEsWUFBWSxDQUFDb0IsY0FBYixDQUE0QixRQUE1QixFQUFzQ0YsUUFBdEM7QUFDRDtBQS9DYyxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKi9cblxuaW1wb3J0IEV2ZW50RW1pdHRlciwge1xuICB0eXBlIEV2ZW50U3Vic2NyaXB0aW9uLFxufSBmcm9tICcuLi92ZW5kb3IvZW1pdHRlci9FdmVudEVtaXR0ZXInO1xuaW1wb3J0IE5hdGl2ZUV2ZW50RW1pdHRlciBmcm9tICcuLi9FdmVudEVtaXR0ZXIvTmF0aXZlRXZlbnRFbWl0dGVyJztcbmltcG9ydCBOYXRpdmVBcHBlYXJhbmNlLCB7XG4gIHR5cGUgQXBwZWFyYW5jZVByZWZlcmVuY2VzLFxuICB0eXBlIENvbG9yU2NoZW1lTmFtZSxcbn0gZnJvbSAnLi9OYXRpdmVBcHBlYXJhbmNlJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7aXNBc3luY0RlYnVnZ2luZ30gZnJvbSAnLi9EZWJ1Z0Vudmlyb25tZW50JztcbmltcG9ydCBQbGF0Zm9ybSBmcm9tICcuLi9VdGlsaXRpZXMvUGxhdGZvcm0nO1xuXG50eXBlIEFwcGVhcmFuY2VMaXN0ZW5lciA9IChwcmVmZXJlbmNlczogQXBwZWFyYW5jZVByZWZlcmVuY2VzKSA9PiB2b2lkO1xuY29uc3QgZXZlbnRFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcjx7XG4gIGNoYW5nZTogW0FwcGVhcmFuY2VQcmVmZXJlbmNlc10sXG59PigpO1xuXG50eXBlIE5hdGl2ZUFwcGVhcmFuY2VFdmVudERlZmluaXRpb25zID0ge1xuICBhcHBlYXJhbmNlQ2hhbmdlZDogW0FwcGVhcmFuY2VQcmVmZXJlbmNlc10sXG59O1xuXG5pZiAoTmF0aXZlQXBwZWFyYW5jZSkge1xuICBjb25zdCBuYXRpdmVFdmVudEVtaXR0ZXIgPSBuZXcgTmF0aXZlRXZlbnRFbWl0dGVyPE5hdGl2ZUFwcGVhcmFuY2VFdmVudERlZmluaXRpb25zPihcbiAgICAvLyBUODg3MTUwNjM6IE5hdGl2ZUV2ZW50RW1pdHRlciBvbmx5IHVzZWQgdGhpcyBwYXJhbWV0ZXIgb24gaU9TLiBOb3cgaXQgdXNlcyBpdCBvbiBhbGwgcGxhdGZvcm1zLCBzbyB0aGlzIGNvZGUgd2FzIG1vZGlmaWVkIGF1dG9tYXRpY2FsbHkgdG8gcHJlc2VydmUgaXRzIGJlaGF2aW9yXG4gICAgLy8gSWYgeW91IHdhbnQgdG8gdXNlIHRoZSBuYXRpdmUgbW9kdWxlIG9uIG90aGVyIHBsYXRmb3JtcywgcGxlYXNlIHJlbW92ZSB0aGlzIGNvbmRpdGlvbiBhbmQgdGVzdCBpdHMgYmVoYXZpb3JcbiAgICBQbGF0Zm9ybS5PUyAhPT0gJ2lvcycgPyBudWxsIDogTmF0aXZlQXBwZWFyYW5jZSxcbiAgKTtcbiAgbmF0aXZlRXZlbnRFbWl0dGVyLmFkZExpc3RlbmVyKFxuICAgICdhcHBlYXJhbmNlQ2hhbmdlZCcsXG4gICAgKG5ld0FwcGVhcmFuY2U6IEFwcGVhcmFuY2VQcmVmZXJlbmNlcykgPT4ge1xuICAgICAgY29uc3Qge2NvbG9yU2NoZW1lfSA9IG5ld0FwcGVhcmFuY2U7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIGNvbG9yU2NoZW1lID09PSAnZGFyaycgfHxcbiAgICAgICAgICBjb2xvclNjaGVtZSA9PT0gJ2xpZ2h0JyB8fFxuICAgICAgICAgIGNvbG9yU2NoZW1lID09IG51bGwsXG4gICAgICAgIFwiVW5yZWNvZ25pemVkIGNvbG9yIHNjaGVtZS4gRGlkIHlvdSBtZWFuICdkYXJrJyBvciAnbGlnaHQnP1wiLFxuICAgICAgKTtcbiAgICAgIGV2ZW50RW1pdHRlci5lbWl0KCdjaGFuZ2UnLCB7Y29sb3JTY2hlbWV9KTtcbiAgICB9LFxuICApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLyoqXG4gICAqIE5vdGU6IEFsdGhvdWdoIGNvbG9yIHNjaGVtZSBpcyBhdmFpbGFibGUgaW1tZWRpYXRlbHksIGl0IG1heSBjaGFuZ2UgYXQgYW55XG4gICAqIHRpbWUuIEFueSByZW5kZXJpbmcgbG9naWMgb3Igc3R5bGVzIHRoYXQgZGVwZW5kIG9uIHRoaXMgc2hvdWxkIHRyeSB0byBjYWxsXG4gICAqIHRoaXMgZnVuY3Rpb24gb24gZXZlcnkgcmVuZGVyLCByYXRoZXIgdGhhbiBjYWNoaW5nIHRoZSB2YWx1ZSAoZm9yIGV4YW1wbGUsXG4gICAqIHVzaW5nIGlubGluZSBzdHlsZXMgcmF0aGVyIHRoYW4gc2V0dGluZyBhIHZhbHVlIGluIGEgYFN0eWxlU2hlZXRgKS5cbiAgICpcbiAgICogRXhhbXBsZTogYGNvbnN0IGNvbG9yU2NoZW1lID0gQXBwZWFyYW5jZS5nZXRDb2xvclNjaGVtZSgpO2BcbiAgICpcbiAgICogQHJldHVybnMgez9Db2xvclNjaGVtZU5hbWV9IFZhbHVlIGZvciB0aGUgY29sb3Igc2NoZW1lIHByZWZlcmVuY2UuXG4gICAqL1xuICBnZXRDb2xvclNjaGVtZSgpOiA/Q29sb3JTY2hlbWVOYW1lIHtcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgaWYgKGlzQXN5bmNEZWJ1Z2dpbmcpIHtcbiAgICAgICAgLy8gSGFyZCBjb2RlIGxpZ2h0IHRoZW1lIHdoZW4gdXNpbmcgdGhlIGFzeW5jIGRlYnVnZ2VyIGFzXG4gICAgICAgIC8vIHN5bmMgY2FsbHMgYXJlbid0IHN1cHBvcnRlZFxuICAgICAgICByZXR1cm4gJ2xpZ2h0JztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUT0RPOiAoaHJhbW9zKSBUNTI5MTk2NTIgVXNlID9Db2xvclNjaGVtZU5hbWUgb25jZSBjb2RlZ2VuIHN1cHBvcnRzIHVuaW9uXG4gICAgY29uc3QgbmF0aXZlQ29sb3JTY2hlbWU6ID9zdHJpbmcgPVxuICAgICAgTmF0aXZlQXBwZWFyYW5jZSA9PSBudWxsXG4gICAgICAgID8gbnVsbFxuICAgICAgICA6IE5hdGl2ZUFwcGVhcmFuY2UuZ2V0Q29sb3JTY2hlbWUoKSB8fCBudWxsO1xuICAgIGludmFyaWFudChcbiAgICAgIG5hdGl2ZUNvbG9yU2NoZW1lID09PSAnZGFyaycgfHxcbiAgICAgICAgbmF0aXZlQ29sb3JTY2hlbWUgPT09ICdsaWdodCcgfHxcbiAgICAgICAgbmF0aXZlQ29sb3JTY2hlbWUgPT0gbnVsbCxcbiAgICAgIFwiVW5yZWNvZ25pemVkIGNvbG9yIHNjaGVtZS4gRGlkIHlvdSBtZWFuICdkYXJrJyBvciAnbGlnaHQnP1wiLFxuICAgICk7XG4gICAgcmV0dXJuIG5hdGl2ZUNvbG9yU2NoZW1lO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBZGQgYW4gZXZlbnQgaGFuZGxlciB0aGF0IGlzIGZpcmVkIHdoZW4gYXBwZWFyYW5jZSBwcmVmZXJlbmNlcyBjaGFuZ2UuXG4gICAqL1xuICBhZGRDaGFuZ2VMaXN0ZW5lcihsaXN0ZW5lcjogQXBwZWFyYW5jZUxpc3RlbmVyKTogRXZlbnRTdWJzY3JpcHRpb24ge1xuICAgIHJldHVybiBldmVudEVtaXR0ZXIuYWRkTGlzdGVuZXIoJ2NoYW5nZScsIGxpc3RlbmVyKTtcbiAgfSxcblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgVXNlIGByZW1vdmVgIG9uIHRoZSBFdmVudFN1YnNjcmlwdGlvbiBmcm9tIGBhZGRFdmVudExpc3RlbmVyYC5cbiAgICovXG4gIHJlbW92ZUNoYW5nZUxpc3RlbmVyKGxpc3RlbmVyOiBBcHBlYXJhbmNlTGlzdGVuZXIpOiB2b2lkIHtcbiAgICAvLyBOT1RFOiBUaGlzIHdpbGwgcmVwb3J0IGEgZGVwcmVjYXRpb24gbm90aWNlIHZpYSBgY29uc29sZS5lcnJvcmAuXG4gICAgZXZlbnRFbWl0dGVyLnJlbW92ZUxpc3RlbmVyKCdjaGFuZ2UnLCBsaXN0ZW5lcik7XG4gIH0sXG59O1xuIl19