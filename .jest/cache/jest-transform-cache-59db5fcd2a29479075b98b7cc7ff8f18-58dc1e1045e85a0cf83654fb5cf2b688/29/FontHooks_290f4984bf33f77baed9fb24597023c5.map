{"version":3,"sources":["../src/FontHooks.ts"],"names":[],"mappings":";;;;;;;;;AAAA;;AAEA;;AAqBM,SAAU,QAAV,CAAmB,GAAnB,EAA2D;AAC/D,kBAA4B,qBAAS,KAAT,CAA5B;AAAA;AAAA,MAAO,MAAP;AAAA,MAAe,SAAf;;AACA,mBAA0B,qBAAuB,IAAvB,CAA1B;AAAA;AAAA,MAAO,KAAP;AAAA,MAAc,QAAd;;AAEA,wBAAU,YAAK;AACb,yBAAU,GAAV,EACG,IADH,CACQ;AAAA,aAAM,SAAS,CAAC,IAAD,CAAf;AAAA,KADR,EAEG,KAFH,CAES,QAFT;AAGD,GAJD,EAIG,EAJH;AAMA,SAAO,CAAC,MAAD,EAAS,KAAT,CAAP;AACD","sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { loadAsync } from './Font';\nimport { FontSource } from './Font.types';\n\n// @needsAudit\n/**\n * ```ts\n * const [loaded, error] = useFonts({ ... });\n * ```\n * Load a map of fonts with [`loadAsync`](#loadasync). This returns a `boolean` if the fonts are\n * loaded and ready to use. It also returns an error if something went wrong, to use in development.\n *\n * > Note, the fonts are not \"reloaded\" when you dynamically change the font map.\n *\n * @param map A map of `fontFamily`s to [`FontSource`](#fontsource)s. After loading the font you can\n * use the key in the `fontFamily` style prop of a `Text` element.\n *\n * @return\n * - __loaded__ (`boolean`) - A boolean to detect if the font for `fontFamily` has finished\n * loading.\n * - __error__ (`Error | null`) - An error encountered when loading the fonts.\n */\nexport function useFonts(map: string | Record<string, FontSource>): [boolean, Error | null] {\n  const [loaded, setLoaded] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    loadAsync(map)\n      .then(() => setLoaded(true))\n      .catch(setError);\n  }, []);\n\n  return [loaded, error];\n}\n"],"sourceRoot":""}