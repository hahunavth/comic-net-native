{"version":3,"sources":["../src/LocalAssets.ts"],"names":[],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;;;;;AAGA,IAAM,aAAa,GAAG,IAAI,GAAJ,CAAQ,UAAU,CAAC,aAAX,IAA4B,EAApC,CAAtB;AAGA,IAAM,WAAW,GAAG,oCAApB;;AAKM,SAAU,gBAAV,CAA2B,IAA3B,EAAyC,IAAzC,EAA4D;AAChE,MAAM,cAAc,GAAG,IAAvB;AACA,MAAM,oBAAoB,GAAM,IAAN,UAAc,IAAd,WAAc,IAAd,GAAsB,EAAtB,CAA1B;;AAEA,UAAQ,IAAR;AACE,SAAK,cAAc,IAAI,WAAvB;AAAoC;AAClC,eAAO,WAAW,CAAC,cAAD,CAAlB;AACD;;AACD,SAAK,oBAAoB,IAAI,WAA7B;AAA0C;AAExC,eAAO,WAAW,CAAC,oBAAD,CAAlB;AACD;;AACD,SAAK,CAAC,OAAN;AAAe;AAGb,YAAM,SAAS,cAAY,IAAZ,IAAmB,IAAI,SAAO,IAAP,GAAgB,EAAvC,CAAf;;AACA,YAAI,uBAAU,YAAV,KAA2B,YAA3B,IAA2C,CAAC,aAAa,CAAC,GAAd,CAAkB,SAAlB,CAAhD,EAA8E;AAC5E,iBAAO,IAAP;AACD;;AACD,oBAAU,UAAU,CAAC,eAArB,GAAuC,SAAvC;AACD;;AACD;AACE,aAAO,IAAP;AAlBJ;AAoBD","sourcesContent":["import Constants from 'expo-constants';\nimport * as FileSystem from 'expo-file-system';\n\nimport { getLocalAssets } from './PlatformUtils';\n\n// Fast lookup check if assets are available in the local bundle in managed apps\nconst bundledAssets = new Set(FileSystem.bundledAssets || []);\n\n// localAssets are provided by the expo-updates module\nconst localAssets = getLocalAssets();\n\n/**\n * Returns the URI of a local asset from its hash, or null if the asset is not available locally\n */\nexport function getLocalAssetUri(hash: string, type: string | null): string | null {\n  const localAssetsKey = hash;\n  const legacyLocalAssetsKey = `${hash}.${type ?? ''}`;\n\n  switch (true) {\n    case localAssetsKey in localAssets: {\n      return localAssets[localAssetsKey];\n    }\n    case legacyLocalAssetsKey in localAssets: {\n      // legacy updates store assets with an extension\n      return localAssets[legacyLocalAssetsKey];\n    }\n    case !__DEV__: {\n      // check legacy location in case we're in Expo client/managed workflow\n      // TODO(eric): remove this once bundledAssets is no longer exported from FileSystem\n      const assetName = `asset_${hash}${type ? `.${type}` : ''}`;\n      if (Constants.appOwnership !== 'standalone' || !bundledAssets.has(assetName)) {\n        return null;\n      }\n      return `${FileSystem.bundleDirectory}${assetName}`;\n    }\n    default:\n      return null;\n  }\n}\n"],"sourceRoot":""}