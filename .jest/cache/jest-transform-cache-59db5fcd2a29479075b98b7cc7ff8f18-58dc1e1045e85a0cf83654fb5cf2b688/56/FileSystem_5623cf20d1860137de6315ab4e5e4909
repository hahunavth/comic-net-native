76efca2d290bb606afccfa41ea5e380e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DownloadResumable = void 0;
Object.defineProperty(exports, "EncodingType", {
  enumerable: true,
  get: function get() {
    return _FileSystem.EncodingType;
  }
});
exports.FileSystemCancellableNetworkTask = void 0;
Object.defineProperty(exports, "FileSystemSessionType", {
  enumerable: true,
  get: function get() {
    return _FileSystem.FileSystemSessionType;
  }
});
Object.defineProperty(exports, "FileSystemUploadType", {
  enumerable: true,
  get: function get() {
    return _FileSystem.FileSystemUploadType;
  }
});
exports.cacheDirectory = exports.bundledAssets = exports.bundleDirectory = exports.UploadTask = exports.StorageAccessFramework = void 0;
exports.copyAsync = copyAsync;
exports.createDownloadResumable = createDownloadResumable;
exports.createUploadTask = createUploadTask;
exports.deleteAsync = deleteAsync;
exports.deleteLegacyDocumentDirectoryAndroid = deleteLegacyDocumentDirectoryAndroid;
exports.documentDirectory = void 0;
exports.downloadAsync = downloadAsync;
exports.getContentUriAsync = getContentUriAsync;
exports.getFreeDiskStorageAsync = getFreeDiskStorageAsync;
exports.getInfoAsync = getInfoAsync;
exports.getTotalDiskCapacityAsync = getTotalDiskCapacityAsync;
exports.makeDirectoryAsync = makeDirectoryAsync;
exports.moveAsync = moveAsync;
exports.readAsStringAsync = readAsStringAsync;
exports.readDirectoryAsync = readDirectoryAsync;
exports.uploadAsync = uploadAsync;
exports.writeAsStringAsync = writeAsStringAsync;

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _expoModulesCore = require("expo-modules-core");

var _reactNative = require("react-native");

var _uuid = require("uuid");

var _ExponentFileSystem = _interopRequireDefault(require("./ExponentFileSystem"));

var _FileSystem = require("./FileSystem.types");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

if (!_ExponentFileSystem.default) {
  console.warn("No native ExponentFileSystem module found, are you sure the expo-file-system's module is linked properly?");
}

var _unused = new _expoModulesCore.EventEmitter(_ExponentFileSystem.default);

function normalizeEndingSlash(p) {
  if (p != null) {
    return p.replace(/\/*$/, '') + '/';
  }

  return null;
}

var documentDirectory = normalizeEndingSlash(_ExponentFileSystem.default.documentDirectory);
exports.documentDirectory = documentDirectory;
var cacheDirectory = normalizeEndingSlash(_ExponentFileSystem.default.cacheDirectory);
exports.cacheDirectory = cacheDirectory;
var bundledAssets = _ExponentFileSystem.default.bundledAssets,
    bundleDirectory = _ExponentFileSystem.default.bundleDirectory;
exports.bundleDirectory = bundleDirectory;
exports.bundledAssets = bundledAssets;

function getInfoAsync(fileUri) {
  var options,
      _args = arguments;
  return _regenerator.default.async(function getInfoAsync$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};

          if (_ExponentFileSystem.default.getInfoAsync) {
            _context.next = 3;
            break;
          }

          throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'getInfoAsync');

        case 3:
          _context.next = 5;
          return _regenerator.default.awrap(_ExponentFileSystem.default.getInfoAsync(fileUri, options));

        case 5:
          return _context.abrupt("return", _context.sent);

        case 6:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, null, Promise);
}

function readAsStringAsync(fileUri, options) {
  return _regenerator.default.async(function readAsStringAsync$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          if (_ExponentFileSystem.default.readAsStringAsync) {
            _context2.next = 2;
            break;
          }

          throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'readAsStringAsync');

        case 2:
          _context2.next = 4;
          return _regenerator.default.awrap(_ExponentFileSystem.default.readAsStringAsync(fileUri, options || {}));

        case 4:
          return _context2.abrupt("return", _context2.sent);

        case 5:
        case "end":
          return _context2.stop();
      }
    }
  }, null, null, null, Promise);
}

function getContentUriAsync(fileUri) {
  return _regenerator.default.async(function getContentUriAsync$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          if (!(_reactNative.Platform.OS === 'android')) {
            _context3.next = 8;
            break;
          }

          if (_ExponentFileSystem.default.getContentUriAsync) {
            _context3.next = 3;
            break;
          }

          throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'getContentUriAsync');

        case 3:
          _context3.next = 5;
          return _regenerator.default.awrap(_ExponentFileSystem.default.getContentUriAsync(fileUri));

        case 5:
          return _context3.abrupt("return", _context3.sent);

        case 8:
          return _context3.abrupt("return", new Promise(function (resolve, reject) {
            resolve(fileUri);
          }));

        case 9:
        case "end":
          return _context3.stop();
      }
    }
  }, null, null, null, Promise);
}

function writeAsStringAsync(fileUri, contents) {
  var options,
      _args4 = arguments;
  return _regenerator.default.async(function writeAsStringAsync$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          options = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : {};

          if (_ExponentFileSystem.default.writeAsStringAsync) {
            _context4.next = 3;
            break;
          }

          throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'writeAsStringAsync');

        case 3:
          _context4.next = 5;
          return _regenerator.default.awrap(_ExponentFileSystem.default.writeAsStringAsync(fileUri, contents, options));

        case 5:
          return _context4.abrupt("return", _context4.sent);

        case 6:
        case "end":
          return _context4.stop();
      }
    }
  }, null, null, null, Promise);
}

function deleteAsync(fileUri) {
  var options,
      _args5 = arguments;
  return _regenerator.default.async(function deleteAsync$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          options = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};

          if (_ExponentFileSystem.default.deleteAsync) {
            _context5.next = 3;
            break;
          }

          throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'deleteAsync');

        case 3:
          _context5.next = 5;
          return _regenerator.default.awrap(_ExponentFileSystem.default.deleteAsync(fileUri, options));

        case 5:
          return _context5.abrupt("return", _context5.sent);

        case 6:
        case "end":
          return _context5.stop();
      }
    }
  }, null, null, null, Promise);
}

function deleteLegacyDocumentDirectoryAndroid() {
  var legacyDocumentDirectory;
  return _regenerator.default.async(function deleteLegacyDocumentDirectoryAndroid$(_context6) {
    while (1) {
      switch (_context6.prev = _context6.next) {
        case 0:
          if (!(_reactNative.Platform.OS !== 'android' || documentDirectory == null)) {
            _context6.next = 2;
            break;
          }

          return _context6.abrupt("return");

        case 2:
          legacyDocumentDirectory = documentDirectory + "ExperienceData/";
          _context6.next = 5;
          return _regenerator.default.awrap(deleteAsync(legacyDocumentDirectory, {
            idempotent: true
          }));

        case 5:
          return _context6.abrupt("return", _context6.sent);

        case 6:
        case "end":
          return _context6.stop();
      }
    }
  }, null, null, null, Promise);
}

function moveAsync(options) {
  return _regenerator.default.async(function moveAsync$(_context7) {
    while (1) {
      switch (_context7.prev = _context7.next) {
        case 0:
          if (_ExponentFileSystem.default.moveAsync) {
            _context7.next = 2;
            break;
          }

          throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'moveAsync');

        case 2:
          _context7.next = 4;
          return _regenerator.default.awrap(_ExponentFileSystem.default.moveAsync(options));

        case 4:
          return _context7.abrupt("return", _context7.sent);

        case 5:
        case "end":
          return _context7.stop();
      }
    }
  }, null, null, null, Promise);
}

function copyAsync(options) {
  return _regenerator.default.async(function copyAsync$(_context8) {
    while (1) {
      switch (_context8.prev = _context8.next) {
        case 0:
          if (_ExponentFileSystem.default.copyAsync) {
            _context8.next = 2;
            break;
          }

          throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'copyAsync');

        case 2:
          _context8.next = 4;
          return _regenerator.default.awrap(_ExponentFileSystem.default.copyAsync(options));

        case 4:
          return _context8.abrupt("return", _context8.sent);

        case 5:
        case "end":
          return _context8.stop();
      }
    }
  }, null, null, null, Promise);
}

function makeDirectoryAsync(fileUri) {
  var options,
      _args9 = arguments;
  return _regenerator.default.async(function makeDirectoryAsync$(_context9) {
    while (1) {
      switch (_context9.prev = _context9.next) {
        case 0:
          options = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : {};

          if (_ExponentFileSystem.default.makeDirectoryAsync) {
            _context9.next = 3;
            break;
          }

          throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'makeDirectoryAsync');

        case 3:
          _context9.next = 5;
          return _regenerator.default.awrap(_ExponentFileSystem.default.makeDirectoryAsync(fileUri, options));

        case 5:
          return _context9.abrupt("return", _context9.sent);

        case 6:
        case "end":
          return _context9.stop();
      }
    }
  }, null, null, null, Promise);
}

function readDirectoryAsync(fileUri) {
  return _regenerator.default.async(function readDirectoryAsync$(_context10) {
    while (1) {
      switch (_context10.prev = _context10.next) {
        case 0:
          if (_ExponentFileSystem.default.readDirectoryAsync) {
            _context10.next = 2;
            break;
          }

          throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'readDirectoryAsync');

        case 2:
          _context10.next = 4;
          return _regenerator.default.awrap(_ExponentFileSystem.default.readDirectoryAsync(fileUri, {}));

        case 4:
          return _context10.abrupt("return", _context10.sent);

        case 5:
        case "end":
          return _context10.stop();
      }
    }
  }, null, null, null, Promise);
}

function getFreeDiskStorageAsync() {
  return _regenerator.default.async(function getFreeDiskStorageAsync$(_context11) {
    while (1) {
      switch (_context11.prev = _context11.next) {
        case 0:
          if (_ExponentFileSystem.default.getFreeDiskStorageAsync) {
            _context11.next = 2;
            break;
          }

          throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'getFreeDiskStorageAsync');

        case 2:
          _context11.next = 4;
          return _regenerator.default.awrap(_ExponentFileSystem.default.getFreeDiskStorageAsync());

        case 4:
          return _context11.abrupt("return", _context11.sent);

        case 5:
        case "end":
          return _context11.stop();
      }
    }
  }, null, null, null, Promise);
}

function getTotalDiskCapacityAsync() {
  return _regenerator.default.async(function getTotalDiskCapacityAsync$(_context12) {
    while (1) {
      switch (_context12.prev = _context12.next) {
        case 0:
          if (_ExponentFileSystem.default.getTotalDiskCapacityAsync) {
            _context12.next = 2;
            break;
          }

          throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'getTotalDiskCapacityAsync');

        case 2:
          _context12.next = 4;
          return _regenerator.default.awrap(_ExponentFileSystem.default.getTotalDiskCapacityAsync());

        case 4:
          return _context12.abrupt("return", _context12.sent);

        case 5:
        case "end":
          return _context12.stop();
      }
    }
  }, null, null, null, Promise);
}

function downloadAsync(uri, fileUri) {
  var options,
      _args13 = arguments;
  return _regenerator.default.async(function downloadAsync$(_context13) {
    while (1) {
      switch (_context13.prev = _context13.next) {
        case 0:
          options = _args13.length > 2 && _args13[2] !== undefined ? _args13[2] : {};

          if (_ExponentFileSystem.default.downloadAsync) {
            _context13.next = 3;
            break;
          }

          throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'downloadAsync');

        case 3:
          _context13.next = 5;
          return _regenerator.default.awrap(_ExponentFileSystem.default.downloadAsync(uri, fileUri, _objectSpread({
            sessionType: _FileSystem.FileSystemSessionType.BACKGROUND
          }, options)));

        case 5:
          return _context13.abrupt("return", _context13.sent);

        case 6:
        case "end":
          return _context13.stop();
      }
    }
  }, null, null, null, Promise);
}

function uploadAsync(url, fileUri) {
  var options,
      _args14 = arguments;
  return _regenerator.default.async(function uploadAsync$(_context14) {
    while (1) {
      switch (_context14.prev = _context14.next) {
        case 0:
          options = _args14.length > 2 && _args14[2] !== undefined ? _args14[2] : {};

          if (_ExponentFileSystem.default.uploadAsync) {
            _context14.next = 3;
            break;
          }

          throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'uploadAsync');

        case 3:
          _context14.next = 5;
          return _regenerator.default.awrap(_ExponentFileSystem.default.uploadAsync(url, fileUri, _objectSpread(_objectSpread({
            sessionType: _FileSystem.FileSystemSessionType.BACKGROUND,
            uploadType: _FileSystem.FileSystemUploadType.BINARY_CONTENT
          }, options), {}, {
            httpMethod: (options.httpMethod || 'POST').toUpperCase()
          })));

        case 5:
          return _context14.abrupt("return", _context14.sent);

        case 6:
        case "end":
          return _context14.stop();
      }
    }
  }, null, null, null, Promise);
}

function createDownloadResumable(uri, fileUri, options, callback, resumeData) {
  return new DownloadResumable(uri, fileUri, options, callback, resumeData);
}

function createUploadTask(url, fileUri, options, callback) {
  return new UploadTask(url, fileUri, options, callback);
}

var FileSystemCancellableNetworkTask = function () {
  function FileSystemCancellableNetworkTask() {
    (0, _classCallCheck2.default)(this, FileSystemCancellableNetworkTask);
    this._uuid = (0, _uuid.v4)();
    this.taskWasCanceled = false;
    this.emitter = new _expoModulesCore.EventEmitter(_ExponentFileSystem.default);
  }

  (0, _createClass2.default)(FileSystemCancellableNetworkTask, [{
    key: "cancelAsync",
    value: function cancelAsync() {
      return _regenerator.default.async(function cancelAsync$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              if (_ExponentFileSystem.default.networkTaskCancelAsync) {
                _context15.next = 2;
                break;
              }

              throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'networkTaskCancelAsync');

            case 2:
              this.removeSubscription();
              this.taskWasCanceled = true;
              _context15.next = 6;
              return _regenerator.default.awrap(_ExponentFileSystem.default.networkTaskCancelAsync(this.uuid));

            case 6:
              return _context15.abrupt("return", _context15.sent);

            case 7:
            case "end":
              return _context15.stop();
          }
        }
      }, null, this, null, Promise);
    }
  }, {
    key: "isTaskCancelled",
    value: function isTaskCancelled() {
      if (this.taskWasCanceled) {
        console.warn('This task was already canceled.');
        return true;
      }

      return false;
    }
  }, {
    key: "uuid",
    get: function get() {
      return this._uuid;
    }
  }, {
    key: "addSubscription",
    value: function addSubscription() {
      var _this = this;

      if (this.subscription) {
        return;
      }

      this.subscription = this.emitter.addListener(this.getEventName(), function (event) {
        if (event.uuid === _this.uuid) {
          var callback = _this.getCallback();

          if (callback) {
            callback(event.data);
          }
        }
      });
    }
  }, {
    key: "removeSubscription",
    value: function removeSubscription() {
      if (!this.subscription) {
        return;
      }

      this.emitter.removeSubscription(this.subscription);
      this.subscription = null;
    }
  }]);
  return FileSystemCancellableNetworkTask;
}();

exports.FileSystemCancellableNetworkTask = FileSystemCancellableNetworkTask;

var UploadTask = function (_FileSystemCancellabl) {
  (0, _inherits2.default)(UploadTask, _FileSystemCancellabl);

  var _super = _createSuper(UploadTask);

  function UploadTask(url, fileUri, options, callback) {
    var _options$httpMethod;

    var _this2;

    (0, _classCallCheck2.default)(this, UploadTask);
    _this2 = _super.call(this);
    _this2.url = url;
    _this2.fileUri = fileUri;
    _this2.callback = callback;
    var httpMethod = (options == null ? void 0 : (_options$httpMethod = options.httpMethod) == null ? void 0 : _options$httpMethod.toUpperCase) || 'POST';
    _this2.options = _objectSpread(_objectSpread({
      sessionType: _FileSystem.FileSystemSessionType.BACKGROUND,
      uploadType: _FileSystem.FileSystemUploadType.BINARY_CONTENT
    }, options), {}, {
      httpMethod: httpMethod
    });
    return _this2;
  }

  (0, _createClass2.default)(UploadTask, [{
    key: "getEventName",
    value: function getEventName() {
      return 'expo-file-system.uploadProgress';
    }
  }, {
    key: "getCallback",
    value: function getCallback() {
      return this.callback;
    }
  }, {
    key: "uploadAsync",
    value: function uploadAsync() {
      var result;
      return _regenerator.default.async(function uploadAsync$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              if (_ExponentFileSystem.default.uploadTaskStartAsync) {
                _context16.next = 2;
                break;
              }

              throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'uploadTaskStartAsync');

            case 2:
              if (!this.isTaskCancelled()) {
                _context16.next = 4;
                break;
              }

              return _context16.abrupt("return");

            case 4:
              this.addSubscription();
              _context16.next = 7;
              return _regenerator.default.awrap(_ExponentFileSystem.default.uploadTaskStartAsync(this.url, this.fileUri, this.uuid, this.options));

            case 7:
              result = _context16.sent;
              this.removeSubscription();
              return _context16.abrupt("return", result);

            case 10:
            case "end":
              return _context16.stop();
          }
        }
      }, null, this, null, Promise);
    }
  }]);
  return UploadTask;
}(FileSystemCancellableNetworkTask);

exports.UploadTask = UploadTask;

var DownloadResumable = function (_FileSystemCancellabl2) {
  (0, _inherits2.default)(DownloadResumable, _FileSystemCancellabl2);

  var _super2 = _createSuper(DownloadResumable);

  function DownloadResumable(url, _fileUri) {
    var _this3;

    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var callback = arguments.length > 3 ? arguments[3] : undefined;
    var resumeData = arguments.length > 4 ? arguments[4] : undefined;
    (0, _classCallCheck2.default)(this, DownloadResumable);
    _this3 = _super2.call(this);
    _this3.url = url;
    _this3._fileUri = _fileUri;
    _this3.options = options;
    _this3.callback = callback;
    _this3.resumeData = resumeData;
    return _this3;
  }

  (0, _createClass2.default)(DownloadResumable, [{
    key: "fileUri",
    get: function get() {
      return this._fileUri;
    }
  }, {
    key: "getEventName",
    value: function getEventName() {
      return 'expo-file-system.downloadProgress';
    }
  }, {
    key: "getCallback",
    value: function getCallback() {
      return this.callback;
    }
  }, {
    key: "downloadAsync",
    value: function downloadAsync() {
      return _regenerator.default.async(function downloadAsync$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              if (_ExponentFileSystem.default.downloadResumableStartAsync) {
                _context17.next = 2;
                break;
              }

              throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');

            case 2:
              if (!this.isTaskCancelled()) {
                _context17.next = 4;
                break;
              }

              return _context17.abrupt("return");

            case 4:
              this.addSubscription();
              _context17.next = 7;
              return _regenerator.default.awrap(_ExponentFileSystem.default.downloadResumableStartAsync(this.url, this._fileUri, this.uuid, this.options, this.resumeData));

            case 7:
              return _context17.abrupt("return", _context17.sent);

            case 8:
            case "end":
              return _context17.stop();
          }
        }
      }, null, this, null, Promise);
    }
  }, {
    key: "pauseAsync",
    value: function pauseAsync() {
      var pauseResult;
      return _regenerator.default.async(function pauseAsync$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              if (_ExponentFileSystem.default.downloadResumablePauseAsync) {
                _context18.next = 2;
                break;
              }

              throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'downloadResumablePauseAsync');

            case 2:
              if (!this.isTaskCancelled()) {
                _context18.next = 4;
                break;
              }

              return _context18.abrupt("return", {
                fileUri: this._fileUri,
                options: this.options,
                url: this.url
              });

            case 4:
              _context18.next = 6;
              return _regenerator.default.awrap(_ExponentFileSystem.default.downloadResumablePauseAsync(this.uuid));

            case 6:
              pauseResult = _context18.sent;
              this.removeSubscription();

              if (!pauseResult) {
                _context18.next = 13;
                break;
              }

              this.resumeData = pauseResult.resumeData;
              return _context18.abrupt("return", this.savable());

            case 13:
              throw new Error('Unable to generate a savable pause state');

            case 14:
            case "end":
              return _context18.stop();
          }
        }
      }, null, this, null, Promise);
    }
  }, {
    key: "resumeAsync",
    value: function resumeAsync() {
      return _regenerator.default.async(function resumeAsync$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              if (_ExponentFileSystem.default.downloadResumableStartAsync) {
                _context19.next = 2;
                break;
              }

              throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');

            case 2:
              if (!this.isTaskCancelled()) {
                _context19.next = 4;
                break;
              }

              return _context19.abrupt("return");

            case 4:
              this.addSubscription();
              _context19.next = 7;
              return _regenerator.default.awrap(_ExponentFileSystem.default.downloadResumableStartAsync(this.url, this.fileUri, this.uuid, this.options, this.resumeData));

            case 7:
              return _context19.abrupt("return", _context19.sent);

            case 8:
            case "end":
              return _context19.stop();
          }
        }
      }, null, this, null, Promise);
    }
  }, {
    key: "savable",
    value: function savable() {
      return {
        url: this.url,
        fileUri: this.fileUri,
        options: this.options,
        resumeData: this.resumeData
      };
    }
  }]);
  return DownloadResumable;
}(FileSystemCancellableNetworkTask);

exports.DownloadResumable = DownloadResumable;
var baseReadAsStringAsync = readAsStringAsync;
var baseWriteAsStringAsync = writeAsStringAsync;
var baseDeleteAsync = deleteAsync;
var baseMoveAsync = moveAsync;
var baseCopyAsync = copyAsync;
var StorageAccessFramework;
exports.StorageAccessFramework = StorageAccessFramework;

(function (StorageAccessFramework) {
  function getUriForDirectoryInRoot(folderName) {
    return "content://com.android.externalstorage.documents/tree/primary:" + folderName + "/document/primary:" + folderName;
  }

  StorageAccessFramework.getUriForDirectoryInRoot = getUriForDirectoryInRoot;

  function requestDirectoryPermissionsAsync() {
    var initialFileUrl,
        _args20 = arguments;
    return _regenerator.default.async(function requestDirectoryPermissionsAsync$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            initialFileUrl = _args20.length > 0 && _args20[0] !== undefined ? _args20[0] : null;

            if (_ExponentFileSystem.default.requestDirectoryPermissionsAsync) {
              _context20.next = 3;
              break;
            }

            throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'StorageAccessFramework.requestDirectoryPermissionsAsync');

          case 3:
            _context20.next = 5;
            return _regenerator.default.awrap(_ExponentFileSystem.default.requestDirectoryPermissionsAsync(initialFileUrl));

          case 5:
            return _context20.abrupt("return", _context20.sent);

          case 6:
          case "end":
            return _context20.stop();
        }
      }
    }, null, null, null, Promise);
  }

  StorageAccessFramework.requestDirectoryPermissionsAsync = requestDirectoryPermissionsAsync;

  function readDirectoryAsync(dirUri) {
    return _regenerator.default.async(function readDirectoryAsync$(_context21) {
      while (1) {
        switch (_context21.prev = _context21.next) {
          case 0:
            if (_ExponentFileSystem.default.readSAFDirectoryAsync) {
              _context21.next = 2;
              break;
            }

            throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'StorageAccessFramework.readDirectoryAsync');

          case 2:
            _context21.next = 4;
            return _regenerator.default.awrap(_ExponentFileSystem.default.readSAFDirectoryAsync(dirUri, {}));

          case 4:
            return _context21.abrupt("return", _context21.sent);

          case 5:
          case "end":
            return _context21.stop();
        }
      }
    }, null, null, null, Promise);
  }

  StorageAccessFramework.readDirectoryAsync = readDirectoryAsync;

  function makeDirectoryAsync(parentUri, dirName) {
    return _regenerator.default.async(function makeDirectoryAsync$(_context22) {
      while (1) {
        switch (_context22.prev = _context22.next) {
          case 0:
            if (_ExponentFileSystem.default.makeSAFDirectoryAsync) {
              _context22.next = 2;
              break;
            }

            throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'StorageAccessFramework.makeDirectoryAsync');

          case 2:
            _context22.next = 4;
            return _regenerator.default.awrap(_ExponentFileSystem.default.makeSAFDirectoryAsync(parentUri, dirName));

          case 4:
            return _context22.abrupt("return", _context22.sent);

          case 5:
          case "end":
            return _context22.stop();
        }
      }
    }, null, null, null, Promise);
  }

  StorageAccessFramework.makeDirectoryAsync = makeDirectoryAsync;

  function createFileAsync(parentUri, fileName, mimeType) {
    return _regenerator.default.async(function createFileAsync$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            if (_ExponentFileSystem.default.createSAFFileAsync) {
              _context23.next = 2;
              break;
            }

            throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'StorageAccessFramework.createFileAsync');

          case 2:
            _context23.next = 4;
            return _regenerator.default.awrap(_ExponentFileSystem.default.createSAFFileAsync(parentUri, fileName, mimeType));

          case 4:
            return _context23.abrupt("return", _context23.sent);

          case 5:
          case "end":
            return _context23.stop();
        }
      }
    }, null, null, null, Promise);
  }

  StorageAccessFramework.createFileAsync = createFileAsync;
  StorageAccessFramework.writeAsStringAsync = baseWriteAsStringAsync;
  StorageAccessFramework.readAsStringAsync = baseReadAsStringAsync;
  StorageAccessFramework.deleteAsync = baseDeleteAsync;
  StorageAccessFramework.moveAsync = baseMoveAsync;
  StorageAccessFramework.copyAsync = baseCopyAsync;
})(StorageAccessFramework || (exports.StorageAccessFramework = StorageAccessFramework = {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,