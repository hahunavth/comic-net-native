{"version":3,"sources":["useFonts.js"],"names":["useFonts","map","loaded","setLoaded","error","setError","then","catch"],"mappings":";;;;;;;;;AAAA;;AAEA;;AAYO,SAASA,QAAT,CAAkBC,GAAlB,EAAuB;AAC5B,kBAA0B,qBAAS,KAAT,CAA1B;AAAA;AAAA,MAAKC,MAAL;AAAA,MAAaC,SAAb;;AACA,mBAAwB,qBAAS,IAAT,CAAxB;AAAA;AAAA,MAAKC,KAAL;AAAA,MAAYC,QAAZ;;AAEA,wBAAU,YAAM;AACd,6BAAUJ,GAAV,EACGK,IADH,CACQ;AAAA,aAAMH,SAAS,CAAC,IAAD,CAAf;AAAA,KADR,EAEGI,KAFH,CAESF,QAFT;AAGD,GAJD,EAIG,EAJH;AAMA,SAAO,CAACH,MAAD,EAASE,KAAT,CAAP;AACD","sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { loadAsync } from 'expo-font';\n\n/**\n * Load a map of custom fonts to use in textual elements.\n * The map keys are used as font names, and can be used with `fontFamily: <name>;`.\n * It returns a boolean describing if all fonts are loaded.\n *\n * Note, the fonts are not \"reloaded\" when you dynamically change the font map.\n *\n * @see https://docs.expo.io/versions/latest/sdk/font/\n * @example const [loaded, error] = useFonts(...);\n */\nexport function useFonts(map) {\n  let [loaded, setLoaded] = useState(false);\n  let [error, setError] = useState(null);\n\n  useEffect(() => {\n    loadAsync(map)\n      .then(() => setLoaded(true))\n      .catch(setError);\n  }, []);\n\n  return [loaded, error];\n}\n"]}