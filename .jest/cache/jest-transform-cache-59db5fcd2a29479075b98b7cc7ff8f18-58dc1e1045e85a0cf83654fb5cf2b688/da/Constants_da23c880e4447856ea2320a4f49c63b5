a8cd811be9a0fd81e883f893e84deb32
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "AppOwnership", {
  enumerable: true,
  get: function get() {
    return _Constants.AppOwnership;
  }
});
Object.defineProperty(exports, "ExecutionEnvironment", {
  enumerable: true,
  get: function get() {
    return _Constants.ExecutionEnvironment;
  }
});
Object.defineProperty(exports, "UserInterfaceIdiom", {
  enumerable: true,
  get: function get() {
    return _Constants.UserInterfaceIdiom;
  }
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _expoModulesCore = require("expo-modules-core");

var _reactNative = require("react-native");

var _Constants = require("./Constants.types");

var _ExponentConstants = _interopRequireDefault(require("./ExponentConstants"));

var _constants$platform;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

if (!_ExponentConstants.default) {
  console.warn("No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?");
}

var rawManifest = null;

if (_expoModulesCore.NativeModulesProxy.ExpoUpdates) {
  var updatesManifest;

  if (_expoModulesCore.NativeModulesProxy.ExpoUpdates.manifest) {
    updatesManifest = _expoModulesCore.NativeModulesProxy.ExpoUpdates.manifest;
  } else if (_expoModulesCore.NativeModulesProxy.ExpoUpdates.manifestString) {
    updatesManifest = JSON.parse(_expoModulesCore.NativeModulesProxy.ExpoUpdates.manifestString);
  }

  if (updatesManifest && Object.keys(updatesManifest).length > 0) {
    rawManifest = updatesManifest;
  }
}

if (_reactNative.NativeModules.EXDevLauncher) {
  var devLauncherManifest;

  if (_reactNative.NativeModules.EXDevLauncher.manifestString) {
    devLauncherManifest = JSON.parse(_reactNative.NativeModules.EXDevLauncher.manifestString);
  }

  if (devLauncherManifest && Object.keys(devLauncherManifest).length > 0) {
    rawManifest = devLauncherManifest;
  }
}

if (!rawManifest && _ExponentConstants.default && _ExponentConstants.default.manifest) {
  rawManifest = _ExponentConstants.default.manifest;

  if (typeof rawManifest === 'string') {
    rawManifest = JSON.parse(rawManifest);
  }
}

var _ref = _ExponentConstants.default || {},
    name = _ref.name,
    appOwnership = _ref.appOwnership,
    nativeConstants = (0, _objectWithoutProperties2.default)(_ref, ["name", "appOwnership"]);

var warnedAboutDeviceYearClass = false;
var warnedAboutIosModel = false;
var warnedAboutInstallationId = false;
var warnedAboutDeviceId = false;
var warnedAboutLinkingUrl = false;

var constants = _objectSpread(_objectSpread({}, nativeConstants), {}, {
  appOwnership: appOwnership != null ? appOwnership : null
});

var constantsPropertiesGetter = {
  deviceYearClass: function deviceYearClass() {
    if (!warnedAboutDeviceYearClass) {
      console.warn("Constants.deviceYearClass has been deprecated in favor of expo-device's Device.deviceYearClass property. This API will be removed in SDK 45.");
      warnedAboutDeviceYearClass = true;
    }

    return nativeConstants.deviceYearClass;
  },
  installationId: function installationId() {
    if (!warnedAboutInstallationId) {
      console.warn("Constants.installationId has been deprecated in favor of generating and storing your own ID. Implement it using expo-application's androidId on Android and a storage API such as expo-secure-store on iOS and localStorage on the web. This API will be removed in SDK 44.");
      warnedAboutInstallationId = true;
    }

    return nativeConstants.installationId;
  },
  deviceId: function deviceId() {
    if (!warnedAboutDeviceId) {
      console.warn("Constants.deviceId has been deprecated in favor of generating and storing your own ID. This API will be removed in SDK 44.");
      warnedAboutDeviceId = true;
    }

    return nativeConstants.installationId;
  },
  linkingUrl: function linkingUrl() {
    if (!warnedAboutLinkingUrl) {
      console.warn("Constants.linkingUrl has been renamed to Constants.linkingUri. Consider using the Linking API directly. Constants.linkingUrl will be removed in SDK 44.");
      warnedAboutLinkingUrl = true;
    }

    return nativeConstants.linkingUri;
  },
  manifest: function manifest() {
    var maybeManifest = getManifest();

    if (!maybeManifest || !isAppManifest(maybeManifest)) {
      return null;
    }

    return maybeManifest;
  },
  manifest2: function manifest2() {
    var maybeManifest = getManifest();

    if (!maybeManifest || !isManifest(maybeManifest)) {
      return null;
    }

    return maybeManifest;
  },
  __unsafeNoWarnManifest: function __unsafeNoWarnManifest() {
    var maybeManifest = getManifest(true);

    if (!maybeManifest || !isAppManifest(maybeManifest)) {
      return null;
    }

    return maybeManifest;
  },
  __unsafeNoWarnManifest2: function __unsafeNoWarnManifest2() {
    var maybeManifest = getManifest(true);

    if (!maybeManifest || !isManifest(maybeManifest)) {
      return null;
    }

    return maybeManifest;
  }
};
definePropertiesGetter(constants, constantsPropertiesGetter);
Object.defineProperty(constants, '__rawManifest_TEST', {
  get: function get() {
    return rawManifest;
  },
  set: function set(value) {
    rawManifest = value;
  },
  enumerable: false
});

if (constants != null && (_constants$platform = constants.platform) != null && _constants$platform.ios) {
  var originalModel = nativeConstants.platform.ios.model;
  definePropertiesGetter(constants.platform.ios, {
    model: function model() {
      if (!warnedAboutIosModel) {
        console.warn("Constants.platform.ios.model has been deprecated in favor of expo-device's Device.modelName property. This API will be removed in SDK 45.");
        warnedAboutIosModel = true;
      }

      return originalModel;
    }
  });
}

function definePropertiesGetter(target, props) {
  for (var _i = 0, _Object$entries = Object.entries(props); _i < _Object$entries.length; _i++) {
    var _ref2 = _Object$entries[_i];

    var _ref3 = (0, _slicedToArray2.default)(_ref2, 2);

    var _name = _ref3[0];
    var func = _ref3[1];
    Object.defineProperty(target, _name, {
      get: func,
      enumerable: false
    });
  }
}

function isAppManifest(manifest) {
  return !isManifest(manifest);
}

function isManifest(manifest) {
  return 'metadata' in manifest;
}

function getManifest() {
  var suppressWarning = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  if (!rawManifest) {
    var invalidManifestType = rawManifest === null ? 'null' : 'undefined';

    if (nativeConstants.executionEnvironment === _Constants.ExecutionEnvironment.Bare && _reactNative.Platform.OS !== 'web') {
      if (!suppressWarning) {
        console.warn("Constants.manifest is " + invalidManifestType + " because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.");
      }
    } else if (nativeConstants.executionEnvironment === _Constants.ExecutionEnvironment.StoreClient || nativeConstants.executionEnvironment === _Constants.ExecutionEnvironment.Standalone) {
      throw new _expoModulesCore.CodedError('ERR_CONSTANTS_MANIFEST_UNAVAILABLE', "Constants.manifest is " + invalidManifestType + ", must be an object.");
    }
  }

  return rawManifest;
}

var _default = constants;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,